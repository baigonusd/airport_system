# Generated by Django 3.0.6 on 2022-04-18 03:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, null=True, unique=True, verbose_name='Email')),
                ('name', models.CharField(blank=True, max_length=90, verbose_name='Name')),
                ('surname', models.CharField(blank=True, max_length=90, verbose_name='Surname')),
                ('role', models.IntegerField(choices=[(1, 'Super admin'), (2, 'Passenger'), (3, 'Employee'), (4, 'System user')], default=5, verbose_name='User role')),
                ('is_valid_email', models.BooleanField(default=False, verbose_name='Is the email confirmed')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Passenger',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('mobile_phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Incorrect phone format', regex='^\\+77[0-9]{9}$')], verbose_name='Mobile phone')),
                ('valid_number', models.BooleanField(default=False, verbose_name='Verified phone number')),
                ('gender', models.IntegerField(blank=True, choices=[(1, 'Man'), (2, 'Woman')], verbose_name='Passenger gender')),
                ('number_of_doc', models.CharField(max_length=9, unique=True, validators=[django.core.validators.RegexValidator(message="Incorrect format of doc's number", regex='^\\d{9}$')], verbose_name="Passenger's number of doc")),
                ('iin', models.CharField(max_length=12, unique=True, validators=[django.core.validators.RegexValidator(message='Incorrect format of IIN', regex='^\\d{12}$')], verbose_name="Passenger's IIN")),
                ('scan_udv_test', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='passenger_profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
